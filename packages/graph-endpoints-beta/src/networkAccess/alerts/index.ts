import type { EndpointRequest, Operation } from './../../types/common.ts';

export interface IEndpoints {
  'DELETE /networkAccess/alerts/{alert-id}': Operation<
    '/networkAccess/alerts/{alert-id}',
    'delete'
  >;
  'GET /networkAccess/alerts': Operation<'/networkAccess/alerts', 'get'>;
  'GET /networkAccess/alerts/{alert-id}': Operation<'/networkAccess/alerts/{alert-id}', 'get'>;
  'PATCH /networkAccess/alerts/{alert-id}': Operation<'/networkAccess/alerts/{alert-id}', 'patch'>;
  'POST /networkAccess/alerts': Operation<'/networkAccess/alerts', 'post'>;
  'GET /networkAccess/alerts/{alert-id}/policy': Operation<
    '/networkAccess/alerts/{alert-id}/policy',
    'get'
  >;
}

/**
 * `DELETE /networkAccess/alerts/{alert-id}`
 *
 */
export function del(
  params?: IEndpoints['DELETE /networkAccess/alerts/{alert-id}']['parameters']
): EndpointRequest<IEndpoints['DELETE /networkAccess/alerts/{alert-id}']['response']> {
  return {
    ver: 'beta',
    method: 'delete',
    path: '/networkAccess/alerts/{alert-id}',
    paramDefs: {
      header: ['If-Match'],
      path: ['alert-id'],
    },
    params,
  };
}

/**
 * `GET /networkAccess/alerts`
 *
 * Get a list of alert objects and their properties for various alerts generated by Global Secure Access (GSA).
 */
export function list(
  params?: IEndpoints['GET /networkAccess/alerts']['parameters']
): EndpointRequest<IEndpoints['GET /networkAccess/alerts']['response']> {
  return {
    ver: 'beta',
    method: 'get',
    path: '/networkAccess/alerts',
    paramDefs: {
      query: ['$top', '$skip', '$search', '$filter', '$count', '$orderby', '$select', '$expand'],
    },
    params,
  };
}

/**
 * `GET /networkAccess/alerts/{alert-id}`
 *
 */
export function get(
  params?: IEndpoints['GET /networkAccess/alerts/{alert-id}']['parameters']
): EndpointRequest<IEndpoints['GET /networkAccess/alerts/{alert-id}']['response']> {
  return {
    ver: 'beta',
    method: 'get',
    path: '/networkAccess/alerts/{alert-id}',
    paramDefs: {
      path: ['alert-id'],
      query: ['$select', '$expand'],
    },
    params,
  };
}

/**
 * `PATCH /networkAccess/alerts/{alert-id}`
 *
 */
export function update(
  body: IEndpoints['PATCH /networkAccess/alerts/{alert-id}']['body'],
  params?: IEndpoints['PATCH /networkAccess/alerts/{alert-id}']['parameters']
): EndpointRequest<IEndpoints['PATCH /networkAccess/alerts/{alert-id}']['response']> {
  return {
    ver: 'beta',
    method: 'patch',
    path: '/networkAccess/alerts/{alert-id}',
    paramDefs: {
      path: ['alert-id'],
    },
    params,
    body,
  };
}

/**
 * `POST /networkAccess/alerts`
 *
 */
export function create(
  body: IEndpoints['POST /networkAccess/alerts']['body']
): EndpointRequest<IEndpoints['POST /networkAccess/alerts']['response']> {
  return {
    ver: 'beta',
    method: 'post',
    path: '/networkAccess/alerts',
    body,
  };
}

export const policy = {
  /**
   * `GET /networkAccess/alerts/{alert-id}/policy`
   *
   * The filtering policy associated with the alert. This relationship allows you to retrieve or manage the filtering policy that triggered or is related to the alert instance.
   */
  get: function get(
    params?: IEndpoints['GET /networkAccess/alerts/{alert-id}/policy']['parameters']
  ): EndpointRequest<IEndpoints['GET /networkAccess/alerts/{alert-id}/policy']['response']> {
    return {
      ver: 'beta',
      method: 'get',
      path: '/networkAccess/alerts/{alert-id}/policy',
      paramDefs: {
        query: ['$select', '$expand'],
        path: ['alert-id'],
      },
      params,
    };
  },
};
