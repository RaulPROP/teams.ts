export * as signIns from './signIns';

import type { EndpointRequest, Operation } from './../types/common.ts';

export interface IEndpoints {
  'GET /auditLogs': Operation<'/auditLogs', 'get'>;
  'PATCH /auditLogs': Operation<'/auditLogs', 'patch'>;
  'GET /auditLogs/directoryAudits': Operation<'/auditLogs/directoryAudits', 'get'>;
  'POST /auditLogs/directoryAudits': Operation<'/auditLogs/directoryAudits', 'post'>;
  'GET /auditLogs/directoryAudits/{directoryAudit-id}': Operation<
    '/auditLogs/directoryAudits/{directoryAudit-id}',
    'get'
  >;
  'PATCH /auditLogs/directoryAudits/{directoryAudit-id}': Operation<
    '/auditLogs/directoryAudits/{directoryAudit-id}',
    'patch'
  >;
  'DELETE /auditLogs/directoryAudits/{directoryAudit-id}': Operation<
    '/auditLogs/directoryAudits/{directoryAudit-id}',
    'delete'
  >;
  'GET /auditLogs/provisioning': Operation<'/auditLogs/provisioning', 'get'>;
  'POST /auditLogs/provisioning': Operation<'/auditLogs/provisioning', 'post'>;
  'GET /auditLogs/provisioning/{provisioningObjectSummary-id}': Operation<
    '/auditLogs/provisioning/{provisioningObjectSummary-id}',
    'get'
  >;
  'PATCH /auditLogs/provisioning/{provisioningObjectSummary-id}': Operation<
    '/auditLogs/provisioning/{provisioningObjectSummary-id}',
    'patch'
  >;
  'DELETE /auditLogs/provisioning/{provisioningObjectSummary-id}': Operation<
    '/auditLogs/provisioning/{provisioningObjectSummary-id}',
    'delete'
  >;
}

/**
 * `GET /auditLogs`
 *
 */
export function list(
  params?: IEndpoints['GET /auditLogs']['parameters']
): EndpointRequest<IEndpoints['GET /auditLogs']['response']> {
  return {
    method: 'get',
    path: '/auditLogs',
    paramDefs: {
      query: ['$select', '$expand'],
    },
    params,
  };
}

/**
 * `PATCH /auditLogs`
 *
 */
export function update(
  body: IEndpoints['PATCH /auditLogs']['body']
): EndpointRequest<IEndpoints['PATCH /auditLogs']['response']> {
  return {
    method: 'patch',
    path: '/auditLogs',
    body,
  };
}

export const directoryAudits = {
  /**
   * `GET /auditLogs/directoryAudits`
   *
   * Get the list of audit logs generated by Microsoft Entra ID. This includes audit logs generated by various services within Microsoft Entra ID, including user, app, device and group Management, privileged identity management (PIM), access reviews, terms of use, identity protection, password management (self-service and admin password resets), and self- service group management, and so on.
   */
  list: function list(
    params?: IEndpoints['GET /auditLogs/directoryAudits']['parameters']
  ): EndpointRequest<IEndpoints['GET /auditLogs/directoryAudits']['response']> {
    return {
      method: 'get',
      path: '/auditLogs/directoryAudits',
      paramDefs: {
        query: ['$top', '$skip', '$search', '$filter', '$count', '$orderby', '$select', '$expand'],
      },
      params,
    };
  },
  /**
   * `POST /auditLogs/directoryAudits`
   *
   */
  create: function create(
    body: IEndpoints['POST /auditLogs/directoryAudits']['body']
  ): EndpointRequest<IEndpoints['POST /auditLogs/directoryAudits']['response']> {
    return {
      method: 'post',
      path: '/auditLogs/directoryAudits',
      body,
    };
  },
  /**
   * `GET /auditLogs/directoryAudits/{directoryAudit-id}`
   *
   * Get a specific Microsoft Entra audit log item. This includes an audit log item generated by various services within Microsoft Entra ID like user, application, device and group management, privileged identity management (PIM), access reviews, terms of use, identity protection, password management (self-service and admin password resets), self-service group management, and so on.
   */
  get: function get(
    params?: IEndpoints['GET /auditLogs/directoryAudits/{directoryAudit-id}']['parameters']
  ): EndpointRequest<IEndpoints['GET /auditLogs/directoryAudits/{directoryAudit-id}']['response']> {
    return {
      method: 'get',
      path: '/auditLogs/directoryAudits/{directoryAudit-id}',
      paramDefs: {
        query: ['$select', '$expand'],
        path: ['directoryAudit-id'],
      },
      params,
    };
  },
  /**
   * `PATCH /auditLogs/directoryAudits/{directoryAudit-id}`
   *
   */
  update: function update(
    body: IEndpoints['PATCH /auditLogs/directoryAudits/{directoryAudit-id}']['body'],
    params?: IEndpoints['PATCH /auditLogs/directoryAudits/{directoryAudit-id}']['parameters']
  ): EndpointRequest<
    IEndpoints['PATCH /auditLogs/directoryAudits/{directoryAudit-id}']['response']
  > {
    return {
      method: 'patch',
      path: '/auditLogs/directoryAudits/{directoryAudit-id}',
      paramDefs: {
        path: ['directoryAudit-id'],
      },
      params,
      body,
    };
  },
  /**
   * `DELETE /auditLogs/directoryAudits/{directoryAudit-id}`
   *
   */
  del: function del(
    params?: IEndpoints['DELETE /auditLogs/directoryAudits/{directoryAudit-id}']['parameters']
  ): EndpointRequest<
    IEndpoints['DELETE /auditLogs/directoryAudits/{directoryAudit-id}']['response']
  > {
    return {
      method: 'delete',
      path: '/auditLogs/directoryAudits/{directoryAudit-id}',
      paramDefs: {
        header: ['If-Match'],
        path: ['directoryAudit-id'],
      },
      params,
    };
  },
};

export const provisioning = {
  /**
   * `GET /auditLogs/provisioning`
   *
   * Get all provisioning events that occurred in your tenant, such as the deletion of a group in a target application or the creation of a user when provisioning user accounts from your HR system.
   */
  get: function get(
    params?: IEndpoints['GET /auditLogs/provisioning']['parameters']
  ): EndpointRequest<IEndpoints['GET /auditLogs/provisioning']['response']> {
    return {
      method: 'get',
      path: '/auditLogs/provisioning',
      paramDefs: {
        query: ['$top', '$skip', '$search', '$filter', '$count', '$orderby', '$select', '$expand'],
      },
      params,
    };
  },
  /**
   * `POST /auditLogs/provisioning`
   *
   */
  create: function create(
    body: IEndpoints['POST /auditLogs/provisioning']['body']
  ): EndpointRequest<IEndpoints['POST /auditLogs/provisioning']['response']> {
    return {
      method: 'post',
      path: '/auditLogs/provisioning',
      body,
    };
  },
  /**
   * `GET /auditLogs/provisioning/{provisioningObjectSummary-id}`
   *
   */
  get$1: function get$1(
    params?: IEndpoints['GET /auditLogs/provisioning/{provisioningObjectSummary-id}']['parameters']
  ): EndpointRequest<
    IEndpoints['GET /auditLogs/provisioning/{provisioningObjectSummary-id}']['response']
  > {
    return {
      method: 'get',
      path: '/auditLogs/provisioning/{provisioningObjectSummary-id}',
      paramDefs: {
        query: ['$select', '$expand'],
        path: ['provisioningObjectSummary-id'],
      },
      params,
    };
  },
  /**
   * `PATCH /auditLogs/provisioning/{provisioningObjectSummary-id}`
   *
   */
  update: function update(
    body: IEndpoints['PATCH /auditLogs/provisioning/{provisioningObjectSummary-id}']['body'],
    params?: IEndpoints['PATCH /auditLogs/provisioning/{provisioningObjectSummary-id}']['parameters']
  ): EndpointRequest<
    IEndpoints['PATCH /auditLogs/provisioning/{provisioningObjectSummary-id}']['response']
  > {
    return {
      method: 'patch',
      path: '/auditLogs/provisioning/{provisioningObjectSummary-id}',
      paramDefs: {
        path: ['provisioningObjectSummary-id'],
      },
      params,
      body,
    };
  },
  /**
   * `DELETE /auditLogs/provisioning/{provisioningObjectSummary-id}`
   *
   */
  del: function del(
    params?: IEndpoints['DELETE /auditLogs/provisioning/{provisioningObjectSummary-id}']['parameters']
  ): EndpointRequest<
    IEndpoints['DELETE /auditLogs/provisioning/{provisioningObjectSummary-id}']['response']
  > {
    return {
      method: 'delete',
      path: '/auditLogs/provisioning/{provisioningObjectSummary-id}',
      paramDefs: {
        header: ['If-Match'],
        path: ['provisioningObjectSummary-id'],
      },
      params,
    };
  },
};
